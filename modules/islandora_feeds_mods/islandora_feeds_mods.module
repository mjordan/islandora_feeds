<?php

/**
 * @file
 * Sample module illustrating how to create a MODS datastream from the flat XML
 * generated by Islandora Feeds.
 */

/**
 * Implement hook_cmodel_pid_islandora_derivative().
 */
function islandora_feeds_mods_islandora_feedscmodel_islandora_derivative(AbstractObject $object = NULL) {
  $collection = 'islandora:feeds1';
  $derivatives = array();
  $collections = $object->relationships->get(FEDORA_RELS_EXT_URI, 'isMemberOfCollection');
  if ($collections[0]['object']['value'] == $collection) {
    $derivatives[] = array(
      'source_dsid' => 'OBJ',
      'destination_dsid' => 'MODS',
      'weight' => '0',
      'function' => array(
        'islandora_feeds_mods_create_mods',
      ),
    );
  }

  return $derivatives;
}

/**
 * Creates a simple MODS derivative as datastreams for given object.
 *
 * @param AbstractObject $object
 *   The object that will be used to generate/store the derivatives.
 * @param bool $force
 *   Whether derivative generation is being forced or not.
 * @param array $hook
 *   The derivative definition.
 *
 * @return array
 *   An array describing the outcome of the MODS creation.
 *
 * @see hook_islandora_derivative()
 */
function islandora_feeds_mods_create_mods(AbstractObject $object, $force = FALSE, $hook = array()) {
  if ($force || !isset($object['MODS'])) {
    if (!isset($object[$hook['source_dsid']])) {
      return array(
        'success' => FALSE,
        'messages' => array(
          array(
            'message' => t('No @source datastream present for object @pid - MODS creation skipped.'),
            'message_sub' => array('@source' => $hook['source_dsid'], '@pid' => $object->id),
            'type' => 'watchdog',
            'severity' => WATCHDOG_ERROR,
          ),
        ),
      );
    }

    try {
      $xsl_doc = new DOMDocument();
      $path_to_xsl = drupal_get_path('module', 'islandora_feeds_mods') . '/xml/feed2mods.xsl';
      $xsl_doc->load($path_to_xsl);
      $xml_doc = new DOMDocument();
      $xml_doc->loadXML($object['OBJ']->content);
      $xslt_proc = new XSLTProcessor();
      $xslt_proc->importStylesheet($xsl_doc);
      $mods_xml = $xslt_proc->transformToXML($xml_doc);
      $success = islandora_feeds_mods_add_datastream($object, 'MODS', $mods_xml);
    }
    catch (exception $e) {
      $success = array(
        'success' => FALSE,
        'messages' => array(
          array(
            'message' => t('Failed to create MODS datastream.'),
            'type' => 'watchdog',
            'severity' => WATCHDOG_ERROR,
          ),
        ),
      );
    }

    return $success;
  }
}

/**
 * Adds the given file as a datastream to the given object.
 *
 * @param AbstractObject $object
 *   The object to add the datasteam to.
 * @param string $datastream_id
 *   The datastream id of the added datastream.
 * @param string $file_uri
 *   A URI to the file containing the content for the datastream.
 *
 * @return array
 *   An array describing the outcome of the datastream addition.
 *
 * @see hook_islandora_derivative()
 */
function islandora_feeds_mods_add_datastream($object, $datastream_id, $xml_string) {
  try {
    $ingest = !isset($object[$datastream_id]);
    $mime_detector = new MimeDetect();
    if ($ingest) {
      $ds = $object->constructDatastream($datastream_id, 'M');
      $ds->label = 'MODS Record';
    }
    else {
      $ds = $object[$datastream_id];
    }
    $ds->setContentFromString($xml_string);
    if ($ingest) {
      $object->ingestDatastream($ds);
    }
    return array(
      'success' => TRUE,
      'messages' => array(
        array(
          'message' => t('Created MODS datastream for (@pid).'),
          'message_sub' => array(
            '@pid' => $object->id,
          ),
          'type' => 'dsm',
        ),
      ),
    );
  }
  catch (exception $e) {
    return array(
      'success' => FALSE,
      'messages' => array(
        array(
          'message' => t('Failed to create MODS datastream for @pid.'),
          'message_sub' => array(
            '@pid' => $object->id,
          ),
          'type' => 'watchdog',
          'severity' => WATCHDOG_ERROR,
        ),
      ),
    );
  }
}

