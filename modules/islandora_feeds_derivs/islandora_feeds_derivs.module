<?php

/**
 * @file
 * Sample module illustrating how to create a MODS (or other) datastream from the
 * flat XML generated by Islandora Feeds.
 */

/**
 * Implements hook_menu().
 */
function islandora_feeds_derivs_menu() {
  $items = array();
  $items['admin/islandora/tools/feeds/derivs'] = array(
    'title' => 'Islandora Feeds Derivs',
    'description' => 'Configure Islandora Feeds Derivs.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_feeds_derivs_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Admin settings form builder.
 */
function islandora_feeds_derivs_admin_settings() {
  $form['islandora_feeds_derivs_instructions'] = array(
    '#type' => 'item',
    '#title' => 'Please note',
    '#markup' => t('Configure these settings <em>before</em> using Feeds to import your objects.'),
  );

  $form['islandora_feeds_derivs_is_active'] = array(
    '#type' => 'checkbox',
    '#title' => t('Settings are active'),
    '#default_value' => variable_get('islandora_feeds_derivs_is_active', 0),
    '#description' => t('Check this option if you want this module to perform the
      actions described below. Uncheck it if you do not.'),
  );

  module_load_include('inc', 'islandora_feeds', 'includes/utilities');
  $collections = islandora_feeds_get_collections_or_content_models('collections');

  $form['islandora_feeds_derivs_source_collection'] = array(
    '#type' => 'select',
    '#title' => t('Apply actions below to objects in this collection'),
    '#options' => $collections,
    '#default_value' => variable_get('islandora_feeds_derivs_source_collection', ''),
    '#required' => TRUE,
  );

  $form['islandora_feeds_derivs_target_dsid'] = array(
    '#title' => t('Target datastream ID'),
    '#type' => 'textfield',
    '#size' => 30,
    '#default_value' => variable_get('islandora_feeds_derivs_target_dsid', 'MODS'),
    '#description' => t("DSID of the derivative datastream you are creating."),
    '#maxlength' => 255,
    '#required' => TRUE,
  );

  $form['islandora_feeds_derivs_target_ds_label'] = array(
    '#title' => t('Target datastream label'),
    '#type' => 'textfield',
    '#size' => 30,
    '#default_value' => variable_get('islandora_feeds_derivs_target_ds_label', 'MODS Record'),
    '#description' => t("Label of the derivative datastream you are creating."),
    '#maxlength' => 255,
    '#required' => TRUE,
  );

  $stylesheets = islandora_feeds_derivs_get_stylesheets();
  $module_dir = drupal_get_path('module', 'islandora_feeds_derivs');
  $form['islandora_feeds_derivs_stylesheet'] = array(
    '#type' => 'select',
    '#title' => t('Stylesheet'),
    '#options' => $stylesheets,
    '#description' => t("The stylesheet to convert the OBJ datastream XML into
      the target datastreamm XML. This stylesheet must be in the %d directory
      and have an '.xsl' extension.",
      array('%d' => $module_dir . '/xml')),
    '#default_value' => variable_get('islandora_feeds_derivs_stylesheet', ''),
    '#required' => TRUE,
  );

  $form['islandora_feeds_derivs_delete_obj'] = array(
    '#type' => 'checkbox',
    '#title' => t('Delete OBJ datastream'),
    '#default_value' => variable_get('islandora_feeds_derivs_delete_obj', 0),
    '#description' => t('Check this option if you want to delete the OBJ datastream 
      automatically after the derivate datastream is created. You would only want to do
      this if you were going to convert the imported objects to another content model.
      Note: Only the OBJ datastreams created during the current Feeds import will be deleted.'),
  );

  $target_collections = $collections;
  $target_collections['do_not_share_object'] = t('Do not share the objects with another collection.');
  $form['islandora_feeds_derivs_target_collection'] = array(
    '#type' => 'select',
    '#title' => t('Share objects with this collection'),
    '#options' => $target_collections,
    '#default_value' => variable_get('islandora_feeds_derivs_target_collection', 'do_not_share_object'),
    '#required' => TRUE,
  );

  $cmodels = islandora_feeds_get_collections_or_content_models('cmodels');
  $cmodels['do_not_change_cmodel'] = t('Do not change content model');
  dd($cmodels, "Content models");
  $form['islandora_feeds_derivs_new_cmodel'] = array(
    '#type' => 'select',
    '#title' => t('Change content model to'),
    '#options' => $cmodels,
    '#description' => t("The Islandora content model you want ingested objects to have.
      Be sure that the collection selected above has this content model enabled in its
      collection policy."),
    '#default_value' => variable_get('islandora_feeds_derivs_new_cmodel', 'do_not_change_cmodel'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implement hook_cmodel_pid_islandora_derivative().
 */
function islandora_feeds_derivs_islandora_feedscmodel_islandora_derivative(AbstractObject $object = NULL) {
  $source_collection = variable_get('islandora_feeds_derivs_source_collection', '');
  $derivatives = array();
  $collections = $object->relationships->get(FEDORA_RELS_EXT_URI, 'isMemberOfCollection');
  if (variable_get('islandora_feeds_derivs_is_active', 0)) {
    if ($collections[0]['object']['value'] == $source_collection) {
      $derivatives[] = array(
        'source_dsid' => 'OBJ',
        'destination_dsid' => variable_get('islandora_feeds_derivs_target_dsid', 'MODS'),
        'weight' => '0',
        'function' => array(
          'islandora_feeds_derivs_create_ds',
          'islandora_feeds_derivs_purge_obj',
          'islandora_feeds_derivs_update_cmodel',
          'islandora_feeds_derivs_add_collection_relationship',
        ),
      );
    }
  }

  return $derivatives;
}

/**
 * Creates a simple MODS derivative as datastreams for given object.
 *
 * @param AbstractObject $object
 *   The object that will be used to generate/store the derivatives.
 * @param bool $force
 *   Whether derivative generation is being forced or not.
 * @param array $hook
 *   The derivative definition.
 *
 * @return array
 *   An array describing the outcome of the MODS creation.
 *
 * @see hook_islandora_derivative()
 */
function islandora_feeds_derivs_create_ds(AbstractObject $object, $force = FALSE, $hook = array()) {
  $target_dsid = variable_get('islandora_feeds_derivs_target_dsid', 'MODS');
  if ($force || !isset($object[$target_dsid])) {
    if (!isset($object[$hook['source_dsid']])) {
      return array(
        'success' => FALSE,
        'messages' => array(
          array(
            'message' => t('No @source datastream present for object @pid - MODS creation skipped.'),
            'message_sub' => array('@source' => $hook['source_dsid'], '@pid' => $object->id),
            'type' => 'watchdog',
            'severity' => WATCHDOG_ERROR,
          ),
        ),
      );
    }

    try {
      $xsl_doc = new DOMDocument();
      $module_dir = drupal_get_path('module', 'islandora_feeds_derivs');
      $path_to_xsl = $module_dir . '/xml/' . variable_get('islandora_feeds_derivs_stylesheet', '');
      $xsl_doc->load($path_to_xsl);
      $xml_doc = new DOMDocument();
      $xml_doc->loadXML($object['OBJ']->content);
      $xslt_proc = new XSLTProcessor();
      $xslt_proc->importStylesheet($xsl_doc);
      $ds_xml = $xslt_proc->transformToXML($xml_doc);
      $success = islandora_feeds_derivs_add_datastream($object, $target_dsid, $ds_xml);
    }
    catch (exception $e) {
      $success = array(
        'success' => FALSE,
        'messages' => array(
          array(
            'message' => t('Failed to create MODS datastream.'),
            'type' => 'watchdog',
            'severity' => WATCHDOG_ERROR,
          ),
        ),
      );
    }

    return $success;
  }
}

/**
 * Adds the given file as a datastream to the given object.
 *
 * @param AbstractObject $object
 *   The object to add the datasteam to.
 * @param string $datastream_id
 *   The datastream id of the added datastream.
 * @param string $file_uri
 *   A URI to the file containing the content for the datastream.
 *
 * @return array
 *   An array describing the outcome of the datastream addition.
 *
 * @see hook_islandora_derivative()
 */
function islandora_feeds_derivs_add_datastream($object, $datastream_id, $xml_string) {
  try {
    $ingest = !isset($object[$datastream_id]);
    if ($ingest) {
      $ds = $object->constructDatastream($datastream_id, 'M');
      $ds->label = variable_get('islandora_feeds_derivs_target_ds_label', 'MODS Record');
    }
    else {
      $ds = $object[$datastream_id];
    }
    $ds->setContentFromString($xml_string);
    if ($ingest) {
      $object->ingestDatastream($ds);
    }
    return array(
      'success' => TRUE,
      'messages' => array(
        array(
          'message' => t('Created @dsid datastream for @pid.'),
          'message_sub' => array(
            '@dsid' => variable_get('islandora_feeds_derivs_target_dsid', 'MODS'),
            '@pid' => $object->id,
          ),
          'type' => 'dsm',
        ),
      ),
    );
  }
  catch (exception $e) {
    return array(
      'success' => FALSE,
      'messages' => array(
        array(
          'message' => t('Failed to create @dsid datastream for @pid.'),
          'message_sub' => array(
            '@dsid' => variable_get('islandora_feeds_derivs_target_dsid', 'MODS'),
            '@pid' => $object->id,
          ),
          'type' => 'watchdog',
          'severity' => WATCHDOG_ERROR,
        ),
      ),
    );
  }
}

/**
 * Purges the OBJ datastream for the given object.
 *
 * @param AbstractObject $object
 *   The object that will be used to generate/store the derivatives.
 * @param bool $force
 *   Whether derivative generation is being forced or not.
 * @param array $hook
 *   The derivative definition.
 *
 * @return array
 *   An array describing the outcome of the purge operation.
 *
 * @see hook_islandora_derivative()
 */
function islandora_feeds_derivs_purge_obj(AbstractObject $object, $force = FALSE, $hook = array()) {
  if (variable_get('islandora_feeds_derivs_delete_obj', 0) && isset($object['OBJ'])) {
    try {
      $object->purgeDatastream('OBJ');
      return array(
        'success' => TRUE,
        'messages' => array(
          array(
            'message' => t('Purges OBJ datastream for @pid.'),
            'message_sub' => array(
              '@pid' => $object->id,
            ),
            'type' => 'dsm',
          ),
        ),
      );
    }
    catch (exception $e) {
      $success = array(
        'success' => FALSE,
        'messages' => array(
          array(
            'message' => t('Failed to delete OBJ datastream.'),
            'type' => 'watchdog',
            'severity' => WATCHDOG_ERROR,
          ),
        ),
      );
    }

    return $success;
  }
}

/**
 * Updates the content model for the given object.
 *
 * @param AbstractObject $object
 *   The object that will be used to generate/store the derivatives.
 * @param bool $force
 *   Whether derivative generation is being forced or not.
 * @param array $hook
 *   The derivative definition.
 *
 * @return array
 *   An array describing the outcome of the purge operation.
 *
 * @see hook_islandora_derivative()
 */
function islandora_feeds_derivs_update_cmodel(AbstractObject $object, $force = FALSE, $hook = array()) {
  $target_cmodel = variable_get('islandora_feeds_derivs_new_cmodel', 'do_not_change_cmodel');
  if ($target_cmodel != 'do_not_change_cmodel') {
    try {
      $cmodels = $object->relationships->get(FEDORA_MODEL_URI, 'hasModel');
      $object->relationships->remove(FEDORA_MODEL_URI, 'hasModel', $cmodels[0]['object']['value']);
      $object->relationships->add(FEDORA_MODEL_URI, 'hasModel', $target_cmodel);
      $object->purgeDatastream('OBJ');
      return array(
        'success' => TRUE,
        'messages' => array(
          array(
            'message' => t('Updated content model for @pid.'),
            'message_sub' => array(
              '@pid' => $object->id,
            ),
            'type' => 'dsm',
          ),
        ),
      );
    }
    catch (exception $e) {
      $success = array(
        'success' => FALSE,
        'messages' => array(
          array(
            'message' => t('Failed to update content model.'),
            'type' => 'watchdog',
            'severity' => WATCHDOG_ERROR,
          ),
        ),
      );
    }

    return $success;
  }
}

/**
 * Shares given object with another collection.
 *
 * @param AbstractObject $object
 *   The object that will be used to generate/store the derivatives.
 * @param bool $force
 *   Whether derivative generation is being forced or not.
 * @param array $hook
 *   The derivative definition.
 *
 * @return array
 *   An array describing the outcome of the purge operation.
 *
 * @see hook_islandora_derivative()
 */
function islandora_feeds_derivs_add_collection_relationship(AbstractObject $object, $force = FALSE, $hook = array()) {
  $target_collection = variable_get('islandora_feeds_derivs_target_collection', 'do_not_share_object');
  if ($target_collection != 'do_not_share_object') {
    try {
      $object->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', $target_collection);
      return array(
        'success' => TRUE,
        'messages' => array(
          array(
            'message' => t('Shared object @pid with collection @coll.'),
            'message_sub' => array(
              '@pid' => $object->id,
              '@coll' => $target_collection,
            ),
            'type' => 'dsm',
          ),
        ),
      );
    }
    catch (exception $e) {
      $success = array(
        'success' => FALSE,
        'messages' => array(
          array(
            'message' => t('Failed to share object.'),
            'type' => 'watchdog',
            'severity' => WATCHDOG_ERROR,
          ),
        ),
      );
    }

    return $success;
  }
}

/**
 * Get list of stylesheet filenames.
 *
 * @return array
 *   List of stylesheet filenames.
 */
function islandora_feeds_derivs_get_stylesheets() {
  $stylesheets = array();
  $module_dir = drupal_get_path('module', 'islandora_feeds_derivs');
  $stylesheet_files = file_scan_directory($module_dir . '/xml', '/\.xsl$/');
  sort($stylesheet_files);
  foreach ($stylesheet_files as $file) {
    $stylesheets[$file->filename] = $file->filename;
  }
  return $stylesheets;
}

