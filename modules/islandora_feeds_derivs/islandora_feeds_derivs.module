<?php

/**
 * @file
 * Module that creates MODS (or other XML) datastreams from the
 * flat XML generated by Islandora Feeds.
 */

/**
 * Implements hook_menu().
 */
function islandora_feeds_derivs_menu() {
  $items = array();
  $items['admin/islandora/tools/feeds/derivs'] = array(
    'title' => 'Islandora Feeds Derivs',
    'description' => 'Configure Islandora Feeds Derivs.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_feeds_derivs_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Admin settings form builder.
 */
function islandora_feeds_derivs_admin_settings() {
  $form['islandora_feeds_derivs_instructions'] = array(
    '#type' => 'item',
    '#title' => 'Please note',
    '#markup' => t('Configure these settings <em>before</em> using Feeds to import your objects.'),
  );

  $form['islandora_feeds_derivs_is_active'] = array(
    '#type' => 'checkbox',
    '#title' => t('Settings are active'),
    '#default_value' => variable_get('islandora_feeds_derivs_is_active', 0),
    '#description' => t('Check this option if you want this module to perform the
      actions described below. Uncheck it if you do not.'),
  );

  module_load_include('inc', 'islandora_feeds', 'includes/utilities');
  $collections = islandora_feeds_get_collections_or_content_models('collections');

  $form['islandora_feeds_derivs_source_collection'] = array(
    '#type' => 'select',
    '#title' => t('Apply actions below to objects in this collection'),
    '#options' => $collections,
    '#default_value' => variable_get('islandora_feeds_derivs_source_collection', ''),
    '#required' => TRUE,
  );

  $stylesheets = islandora_feeds_derivs_get_stylesheets();
  $module_dir = drupal_get_path('module', 'islandora_feeds_derivs');
  $form['islandora_feeds_derivs_stylesheet'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#title' => t('Stylesheet'),
    '#options' => $stylesheets,
    '#description' => t("The stylesheet to convert the OBJ datastream XML into
      the target datastreamm XML. If you select multiple stylesheets, a derivative
      will be created for each one. To show up in this list, stylesheets must be
      in the %d directory and have an '.xsl' extension.",
      array('%d' => $module_dir . '/xml')),
    '#default_value' => variable_get('islandora_feeds_derivs_stylesheet', ''),
    '#required' => TRUE,
  );

  $form['islandora_feeds_derivs_delete_obj'] = array(
    '#type' => 'checkbox',
    '#title' => t('Delete the OBJ datastream'),
    '#default_value' => variable_get('islandora_feeds_derivs_delete_obj', 0),
    '#description' => t('Check this option if you want to delete the OBJ datastream 
      automatically after the derivate datastream is created. You would only want to do
      this if you were going to convert the imported objects to another content model.
      Note: Only the OBJ datastreams created during the current Feeds import will be
      deleted.'),
  );

  $form['islandora_feeds_derivs_replace_obj'] = array(
    '#type' => 'checkbox',
    '#title' => t('Replace the OBJ datastream with the derivative'),
    '#default_value' => variable_get('islandora_feeds_derivs_replace_obj', 0),
    '#description' => t("Check this option if you want to replace the content of the OBJ
      datastream with the content of the derivative being created. Only applies when
      one stylesheet is selected. Note that the original OBJ's version history is lost.
      Also note that you will need to override the theming for the display of the new
      OBJ content (specifically, theme('islandora_feeds_item_display',
      array('islandora_object' => \$object)))."),
  );

  $form['islandora_feeds_derivs_delete_deriv'] = array(
    '#type' => 'checkbox',
    '#title' => t('Delete the derivative datastream'),
    '#default_value' => variable_get('islandora_feeds_derivs_delete_deriv', 0),
    '#description' => t("Check this option if you want to delete the derivative datastream
      after its content replaces the OBJ datastream's content."),
    '#states' => array(
      'visible' => array(
        ':input[name="islandora_feeds_derivs_replace_obj"]' => array('checked' => TRUE),
      ),
    ),
  );

  $target_collections = $collections;
  $target_collections['do_not_share_object'] = t('Do not share the objects with another collection');
  $form['islandora_feeds_derivs_target_collection'] = array(
    '#type' => 'select',
    '#title' => t('Share objects with this collection'),
    '#options' => $target_collections,
    '#default_value' => variable_get('islandora_feeds_derivs_target_collection', 'do_not_share_object'),
    '#required' => TRUE,
  );

  $cmodels = islandora_feeds_get_collections_or_content_models('cmodels');
  $cmodels['do_not_change_cmodel'] = t('Do not change content model');
  $form['islandora_feeds_derivs_new_cmodel'] = array(
    '#type' => 'select',
    '#title' => t('Change content model to'),
    '#options' => $cmodels,
    '#description' => t("The Islandora content model you want ingested objects to have.
      Be sure that the collection selected above has this content model enabled in its
      collection policy."),
    '#default_value' => variable_get('islandora_feeds_derivs_new_cmodel', 'do_not_change_cmodel'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Validation callback for the admin settings form.
 */
function islandora_feeds_derivs_admin_settings_validate($form, &$form_state) {
  if ($form_state['values']['islandora_feeds_derivs_replace_obj']) {
    if (count($form_state['values']['islandora_feeds_derivs_stylesheet']) > 1) {
      form_set_error('islandora_feeds_derivs_replace_obj',
        t("You can't choose the 'Replace the OBJ datastream with the derivative' option
          if you have selected more than one stylesheet. Please select only one stylesheet."));
    }
    if ($form_state['values']['islandora_feeds_derivs_delete_obj']) {
      form_set_error('islandora_feeds_derivs_replace_obj',
        t("You can't choose the 'Replace the OBJ datastream with the derivative' option
          if you have selected 'Delete the OBJ datastream'. Please uncheck 'Delete the OBJ datastream'."));
    }
  }
}

/**
 * Implement hook_cmodel_pid_islandora_derivative().
 */
function islandora_feeds_derivs_islandora_feedscmodel_islandora_derivative(AbstractObject $object = NULL) {
  $source_collection = variable_get('islandora_feeds_derivs_source_collection', '');
  $derivatives = array();
  $collections = $object->relationships->get(FEDORA_RELS_EXT_URI, 'isMemberOfCollection');
  if (variable_get('islandora_feeds_derivs_is_active', 0)) {
    // The object should only be in one collection since it's just been created.
    if ($collections[0]['object']['value'] == $source_collection) {
      $derivatives[] = array(
        'source_dsid' => 'OBJ',
        // We can't know the DSID at this point since it's determined at runtime, and there
        // could be more than one selected in the settings form.
        // 'destination_dsid' => variable_get('islandora_feeds_derivs_target_dsid', ''),
        'weight' => '0',
        'function' => array(
          'islandora_feeds_derivs_create_ds',
          'islandora_feeds_derivs_purge_obj',
          'islandora_feeds_derivs_replace_obj',
          'islandora_feeds_derivs_update_cmodel',
          'islandora_feeds_derivs_add_collection_relationship',
        ),
      );
    }
  }

  return $derivatives;
}

/**
 * Creates datastreams for given object.
 *
 * @param AbstractObject $object
 *   The object that will be used to generate/store the derivatives.
 * @param bool $force
 *   Whether derivative generation is being forced or not.
 * @param array $hook
 *   The derivative definition.
 *
 * @return array
 *   An array describing the outcome of the MODS creation.
 *
 * @see hook_islandora_derivative()
 */
function islandora_feeds_derivs_create_ds(AbstractObject $object, $force = TRUE, $hook = array()) {
  // We don't check for the existence of the destination DSID because the object will not have it.
  // We also don't check $force since we always want to create the derivative.
  if (!isset($object[$hook['source_dsid']])) {
    return array(
      'success' => FALSE,
      'messages' => array(
	array(
	  'message' => t('No @source datastream present for object @pid - derivative XML datastream creation skipped.'),
	  'message_sub' => array('@source' => $hook['source_dsid'], '@pid' => $object->id),
	  'type' => 'watchdog',
	  'severity' => WATCHDOG_ERROR,
	),
      ),
    );
  }

  try {
    $module_dir = drupal_get_path('module', 'islandora_feeds_derivs');
    $stylesheets = variable_get('islandora_feeds_derivs_stylesheet', '');
    foreach ($stylesheets as $k => $v) {
      $path_to_xsl =  $module_dir . '/xml/' . $v;

      $xsl_doc = new DOMDocument();
      $xsl_doc->load($path_to_xsl);

      $xsl_parameters = islandora_feeds_derivs_get_stylesheet_params($xsl_doc);
      
      $xml_doc = new DOMDocument();
      $xml_doc->loadXML($object['OBJ']->content);
      $xslt_proc = new XSLTProcessor();
      $xslt_proc->importStylesheet($xsl_doc);
      $ds_xml = $xslt_proc->transformToXML($xml_doc);
      $success = islandora_feeds_derivs_add_datastream($object, $xsl_parameters, $ds_xml);
    }
  }
  catch (exception $e) {
    $success = array(
      'success' => FALSE,
      'messages' => array(
	array(
	  'message' => t('Failed to create derivative XML datastream.'),
	  'type' => 'watchdog',
	  'severity' => WATCHDOG_ERROR,
	),
      ),
    );
  }

  return $success;
}

/**
 * Adds the given file as a datastream to the given object.
 *
 * @param AbstractObject $object
 *   The object to add the datasteam to.
 * @param array $params
 *   An associative array containing the DSID and DSLABEL of the datastream to be added.
 * @param string $xml_string
 *   The serialized XML to be added as the datastream content.
 *
 * @return array
 *   An array describing the outcome of the datastream addition.
 *
 * @see hook_islandora_derivative()
 */
function islandora_feeds_derivs_add_datastream(AbstractObject $object, $params, $xml_string) {
  if (!in_array($params['DSID'], $_SESSION['islandora_feeds_derivs_seen']['deriv_generated'][$object->id])) {
  try {
    $ingest = !isset($object[$params['DSID']]);
    if ($ingest) {
      $ds = $object->constructDatastream($params['DSID'], 'M');
      $ds->label = $params['DSLABEL'];
      $ds->mimetype = 'text/xml';
    }
    else {
      $ds = $object[$params['DSID']];
      $ds->label = $params['DSLABEL'];
      $ds->mimetype = 'text/xml';
    }
    $ds->setContentFromString($xml_string);
    if ($ingest) {
      $object->ingestDatastream($ds);
      $_SESSION['islandora_feeds_derivs_seen']['deriv_generated'][$object->id][] = $params['DSID'];
    }

    return array(
      'success' => TRUE,
      'messages' => array(
        array(
          'message' => t('Created @dsid datastream for @pid.'),
          'message_sub' => array(
            '@dsid' => $params['DSID'],
            '@pid' => $object->id,
          ),
          'type' => 'dsm',
        ),
      ),
    );
  }
  catch (exception $e) {
    return array(
      'success' => FALSE,
      'messages' => array(
        array(
          'message' => t('Failed to create @dsid datastream for @pid.'),
          'message_sub' => array(
            '@dsid' => $params['DSID'],
            '@pid' => $object->id,
          ),
          'type' => 'watchdog',
          'severity' => WATCHDOG_ERROR,
        ),
      ),
    );
  }
  }
}

/**
 * Purges the OBJ datastream for the given object.
 *
 * @param AbstractObject $object
 *   The object that will be used to generate/store the derivatives.
 * @param bool $force
 *   Whether derivative generation is being forced or not.
 * @param array $hook
 *   The derivative definition.
 *
 * @return array
 *   An array describing the outcome of the purge operation.
 *
 * @see hook_islandora_derivative()
 */
function islandora_feeds_derivs_purge_obj(AbstractObject $object, $force = FALSE, $hook = array()) {
  if (variable_get('islandora_feeds_derivs_delete_obj', 0) && isset($object['OBJ'])) {
    try {
      $object->purgeDatastream('OBJ');
      return array(
        'success' => TRUE,
        'messages' => array(
          array(
            'message' => t('Purges OBJ datastream for @pid.'),
            'message_sub' => array(
              '@pid' => $object->id,
            ),
            'type' => 'dsm',
          ),
        ),
      );
    }
    catch (exception $e) {
      $success = array(
        'success' => FALSE,
        'messages' => array(
          array(
            'message' => t('Failed to delete OBJ datastream.'),
            'type' => 'watchdog',
            'severity' => WATCHDOG_ERROR,
          ),
        ),
      );
    }

    return $success;
  }
}

/**
 * Replaces the OBJ datastream for the given object with the derivative.
 *
 * @param AbstractObject $object
 *   The object that will be used to generate/store the derivatives.
 * @param bool $force
 *   Whether derivative generation is being forced or not.
 * @param array $hook
 *   The derivative definition.
 *
 * @return array
 *   An array describing the outcome of the purge operation.
 *
 * @see hook_islandora_derivative()
 */
function islandora_feeds_derivs_replace_obj(AbstractObject $object, $force = FALSE, $hook = array()) {
  $stylesheet = variable_get('islandora_feeds_derivs_stylesheet', '');
  try {
    // Get the derivative DSID from the stylesheet used to create it,
    // which is the current stylesheet.
    $stylesheet_keys = array_keys($stylesheet);
    $module_dir = drupal_get_path('module', 'islandora_feeds_derivs');
    $path_to_xsl =  $module_dir . '/xml/' . $stylesheet_keys[0];
    $xsl_doc = new DOMDocument();
    $xsl_doc->load($path_to_xsl);
    $xsl_parameters = islandora_feeds_derivs_get_stylesheet_params($xsl_doc);
    unset($xsl_doc);
  }
  catch (exception $e) {
    $success = array(
      'success' => FALSE,
      'messages' => array(
        array(
          'message' => t('Failed to get stylesheet parameters required to replace OBJ datastream.'),
          'type' => 'watchdog',
          'severity' => WATCHDOG_ERROR,
        ),
      ),
    );
  }
  if (count($stylesheet) == 1 && variable_get('islandora_feeds_derivs_replace_obj', 0) &&
    !in_array($object->id, $_SESSION['islandora_feeds_derivs_seen']['obj_replaced']) &&
    isset($object['OBJ']) && isset($object[$xsl_parameters['DSID']])) {
    try {
      // Replace the contents of OBJ with the content of the derivative.
      $derivative_dsid = $xsl_parameters['DSID'];
      $derivative_ds = islandora_datastream_load($derivative_dsid, $object);

      // Delete the OBJ datastream.
      $object->purgeDatastream('OBJ');

      // Ingest the new OBJ datastream.
      $new_obj_ds = $object->constructDatastream('OBJ', 'M');
      $new_obj_ds->label = 'Field data';
      $new_obj_ds->mimetype = 'text/xml';
      $new_obj_ds->setContentFromString($derivative_ds->content);
      $object->ingestDatastream($new_obj_ds);

      // Delete the derivative.
      if (variable_get('islandora_feeds_derivs_delete_deriv', 0)) {
        if (!in_array($object->id, $_SESSION['islandora_feeds_derivs_seen']['deriv_deleted'])) {
          $object->purgeDatastream($derivative_dsid);
          $_SESSION['islandora_feeds_derivs_seen']['deriv_deleted'][] = $object->id;
        }
      }

      $_SESSION['islandora_feeds_derivs_seen']['obj_replaced'][] = $object->id;

      return array(
        'success' => TRUE,
        'messages' => array(
          array(
            'message' => t('Replaced OBJ datastream for @pid with content from @ds.'),
            'message_sub' => array(
              '@pid' => $object->id,
              '@ds' => $derivative_dsid,
            ),
            'type' => 'dsm',
          ),
        ),
      );
    }
    catch (exception $e) {
      $success = array(
        'success' => FALSE,
        'messages' => array(
          array(
            'message' => t('Failed to replace OBJ datastream.'),
            'type' => 'watchdog',
            'severity' => WATCHDOG_ERROR,
          ),
        ),
      );
    }

    return $success;
  }
}

/**
 * Updates the content model for the given object.
 *
 * @param AbstractObject $object
 *   The object that will be used to generate/store the derivatives.
 * @param bool $force
 *   Whether derivative generation is being forced or not.
 * @param array $hook
 *   The derivative definition.
 *
 * @return array
 *   An array describing the outcome of the purge operation.
 *
 * @see hook_islandora_derivative()
 */
function islandora_feeds_derivs_update_cmodel(AbstractObject $object, $force = FALSE, $hook = array()) {
  $target_cmodel = variable_get('islandora_feeds_derivs_new_cmodel', 'do_not_change_cmodel');
  if ($target_cmodel != 'do_not_change_cmodel') {
    try {
      $cmodels = $object->relationships->get(FEDORA_MODEL_URI, 'hasModel');
      $object->relationships->remove(FEDORA_MODEL_URI, 'hasModel', $cmodels[0]['object']['value']);
      $object->relationships->add(FEDORA_MODEL_URI, 'hasModel', $target_cmodel);
      $object->purgeDatastream('OBJ');
      return array(
        'success' => TRUE,
        'messages' => array(
          array(
            'message' => t('Updated content model for @pid.'),
            'message_sub' => array(
              '@pid' => $object->id,
            ),
            'type' => 'dsm',
          ),
        ),
      );
    }
    catch (exception $e) {
      $success = array(
        'success' => FALSE,
        'messages' => array(
          array(
            'message' => t('Failed to update content model.'),
            'type' => 'watchdog',
            'severity' => WATCHDOG_ERROR,
          ),
        ),
      );
    }

    return $success;
  }
}

/**
 * Shares given object with another collection.
 *
 * @param AbstractObject $object
 *   The object that will be used to generate/store the derivatives.
 * @param bool $force
 *   Whether derivative generation is being forced or not.
 * @param array $hook
 *   The derivative definition.
 *
 * @return array
 *   An array describing the outcome of the purge operation.
 *
 * @see hook_islandora_derivative()
 */
function islandora_feeds_derivs_add_collection_relationship(AbstractObject $object, $force = FALSE, $hook = array()) {
  $target_collection = variable_get('islandora_feeds_derivs_target_collection', 'do_not_share_object');
  if ($target_collection != 'do_not_share_object') {
    try {
      $object->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', $target_collection);
      return array(
        'success' => TRUE,
        'messages' => array(
          array(
            'message' => t('Shared object @pid with collection @coll.'),
            'message_sub' => array(
              '@pid' => $object->id,
              '@coll' => $target_collection,
            ),
            'type' => 'dsm',
          ),
        ),
      );
    }
    catch (exception $e) {
      $success = array(
        'success' => FALSE,
        'messages' => array(
          array(
            'message' => t('Failed to share object.'),
            'type' => 'watchdog',
            'severity' => WATCHDOG_ERROR,
          ),
        ),
      );
    }

    return $success;
  }
}

/**
 * Get list of stylesheet filenames.
 *
 * @return array
 *   List of stylesheet filenames.
 */
function islandora_feeds_derivs_get_stylesheets() {
  $stylesheets = array();
  $module_dir = drupal_get_path('module', 'islandora_feeds_derivs');
  $stylesheet_files = file_scan_directory($module_dir . '/xml', '/\.xsl$/');
  sort($stylesheet_files);
  foreach ($stylesheet_files as $file) {
    $stylesheets[$file->filename] = $file->filename;
  }
  return $stylesheets;
}

/**
 * Get the DSID and datastream label from a stylesheet's <param> elements.
 *
 * @param Object $xsl_doc
 *   A DOM representation of the stylesheet.
 *
 * @return array
 *   Associative array containing the keys DSID and DSLABEL.
 */
function islandora_feeds_derivs_get_stylesheet_params($xsl_doc) {
  // Parse the <xsl:param> elements (which contain the values for the DSID and DS label)
  // in the stylesheet and put them in an array for passing on to
  // islandora_feeds_derivs_add_datastream().
  $param_elements = $xsl_doc->getElementsByTagNameNS('http://www.w3.org/1999/XSL/Transform', 'param');
  $xsl_parameters = array();
  if (count($param_elements)) {
    foreach ($param_elements as $element) {
      $xsl_parameters[$element->getAttribute('name')] = $element->nodeValue;
      $name = $element->getAttribute('name');
    }
    // Supply defaults in case there are <xsl:param> elements in the stylesheet but they
    // are not the right ones.
    if (!array_key_exists('DSID', $xsl_parameters)) {
      $xsl_parameters['DSID'] = 'NONEPROVIDED';
    }
    if (!array_key_exists('DSLABEL', $xsl_parameters)) {
      $xsl_parameters['DSLABEL'] = 'None provided';
    }
  }
  // Supply a default in case there are no <xsl:param> elements in the stylesheet.
  else {
    $xsl_parameters = array(
      'DSID' => 'NONEPROVIDED',
      'DSLABEL' => 'None provided',
    );
  }
  return $xsl_parameters;
}
